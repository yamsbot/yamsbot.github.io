<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>random on üç† yamsbot</title>
    <link>https://yams.bot/random/</link>
    <description>Recent content in random on üç† yamsbot</description>
    <generator>Hugo -- 0.138.0</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Jan 2025 13:28:56 -0500</lastBuildDate>
    <atom:link href="https://yams.bot/random/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Phishing Email Analysis</title>
      <link>https://yams.bot/random/phishingemails/</link>
      <pubDate>Tue, 28 Jan 2025 13:28:56 -0500</pubDate>
      <guid>https://yams.bot/random/phishingemails/</guid>
      <description>&lt;h2 id=&#34;what-is-a-phishing-email&#34;&gt;What is a phishing email?&lt;/h2&gt;
&lt;p&gt;In my words, a phishing email, or phish in general, is an attackers attempt to persuade the victim user into doing some action. This could be anything, but typically attackers are looking to persuade the victim into:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Purchasing something for the attacker&lt;/li&gt;
&lt;li&gt;Navigate to a malicious website&lt;/li&gt;
&lt;li&gt;Disclose information&lt;/li&gt;
&lt;li&gt;Download and run an application&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;how-do-attackers-persuade-victims&#34;&gt;How do attackers persuade victims?&lt;/h2&gt;
&lt;p&gt;Think back to primary school. At least in my case, this was my first exposure to what is called the &amp;ldquo;rhetorical triangle&amp;rdquo;. The rhetorical triangle consists of the three rhetoritcal devices:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Exploitation</title>
      <link>https://yams.bot/random/exploitation/</link>
      <pubDate>Fri, 22 Nov 2024 02:01:24 -0500</pubDate>
      <guid>https://yams.bot/random/exploitation/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;finding-offsets&#34;&gt;Finding offsets&lt;/h2&gt;
&lt;p&gt;this may be silly, but sometimes its easy to forget things like this!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;symbol tables: objdump -T /usr/lib/x86_64-linux-gnu/libc.so.6 | grep vtable
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; syms: readelf -s /usr/lib/x86_64-linux-gnu/libc.so.6 | grep puts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;string offset: strings -at x /usr/lib/libc.so.6 | grep /bin/sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;objdump has many options that are extremely useful when debugging :)&lt;/p&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h2 id=&#34;writing-shellcode&#34;&gt;Writing shellcode&lt;/h2&gt;
&lt;p&gt;first write your shellcode in intel (no at&amp;amp;t garbage plz)&lt;/p&gt;
&lt;p&gt;the asm below is a simple call to exit() in 64 bit linux&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
