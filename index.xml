<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>üç† yamsbot</title>
    <link>https://yams.bot/</link>
    <description>Recent content on üç† yamsbot</description>
    <generator>Hugo -- 0.138.0</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 12 Apr 2025 11:24:20 -0400</lastBuildDate>
    <atom:link href="https://yams.bot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[HTB] ARMs Race</title>
      <link>https://yams.bot/writeups/hackthebox/arms_race/</link>
      <pubDate>Sat, 12 Apr 2025 11:24:20 -0400</pubDate>
      <guid>https://yams.bot/writeups/hackthebox/arms_race/</guid>
      <description>&lt;h1 id=&#34;arms-race&#34;&gt;ARMs Race&lt;/h1&gt;
&lt;p&gt;Just wanted to make a quick writeup for this challenge because easy challenges structured in this way are pretty fun to me. Although not too challenging, it was fun to solve. This challenge also wraps up the &amp;ldquo;Easy&amp;rdquo; challenges in the active reversing category for HTB.&lt;/p&gt;
&lt;p&gt;The challenges name is &amp;ldquo;ARMs Race&amp;rdquo;, which gives us a strong hint that the architecture is ARM. There are no files to download, just an instance to spawn and connect to.&lt;br&gt;
Connecting to the instance the end user is greeted with:&lt;/p&gt;</description>
    </item>
    <item>
      <title>[HTB] Cyber Apocalypse 2025</title>
      <link>https://yams.bot/writeups/hackthebox/cyber_apoc2025/</link>
      <pubDate>Mon, 24 Mar 2025 21:53:04 -0400</pubDate>
      <guid>https://yams.bot/writeups/hackthebox/cyber_apoc2025/</guid>
      <description>&lt;h1 id=&#34;reversing&#34;&gt;Reversing&lt;/h1&gt;
&lt;h2 id=&#34;sealedrune&#34;&gt;Sealedrune&lt;/h2&gt;
&lt;p&gt;strings and base64 decode for flag&lt;/p&gt;
&lt;p&gt;flag: &lt;code&gt;HTB{run3_m4g1c_r3v34l3d}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;encryptedscroll&#34;&gt;EncryptedScroll&lt;/h2&gt;
&lt;p&gt;debug in gdb or just take the char array from ghidra and &amp;ldquo;decrypt&amp;rdquo; the flag&lt;/p&gt;
&lt;p&gt;flag: &lt;code&gt;HTB{s1mpl3_fl4g_4r1thm3t1c}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;endlesscycle&#34;&gt;EndlessCycle&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pcVar2 = (code *)mmap((void *)0x0,158,7,0x21,-1,0);
srand(seed);
for (i = 0; i &amp;lt; 158; i = i + 1) {
    for (ii = 0; ii &amp;lt; (ulong)(long)*(int *)(&amp;amp;DAT_00104040 + i * 4); ii = ii + 1) {
        rand();
    }
    iVar1 = rand();
    pcVar2[i] = SUB41(iVar1,0);
}
iVar1 = (*pcVar2)();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;seeds rand with a static value defined in .data: 5b bc d2 cf&lt;/p&gt;</description>
    </item>
    <item>
      <title>Phishing Email Analysis</title>
      <link>https://yams.bot/random/phishingemails/</link>
      <pubDate>Tue, 28 Jan 2025 13:28:56 -0500</pubDate>
      <guid>https://yams.bot/random/phishingemails/</guid>
      <description>&lt;h2 id=&#34;what-is-a-phishing-email&#34;&gt;What is a phishing email?&lt;/h2&gt;
&lt;p&gt;In my words, a phishing email, or phish in general, is an attackers attempt to persuade the victim user into doing some action. This could be anything, but typically attackers are looking to persuade the victim into:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Purchasing something for the attacker&lt;/li&gt;
&lt;li&gt;Navigate to a malicious website&lt;/li&gt;
&lt;li&gt;Disclose information&lt;/li&gt;
&lt;li&gt;Download and run an application&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;how-do-attackers-persuade-victims&#34;&gt;How do attackers persuade victims?&lt;/h2&gt;
&lt;p&gt;Think back to primary school. At least in my case, this was my first exposure to what is called the &amp;ldquo;rhetorical triangle&amp;rdquo;. The rhetorical triangle consists of the three rhetoritcal devices:&lt;/p&gt;</description>
    </item>
    <item>
      <title>[HTB] vvm</title>
      <link>https://yams.bot/writeups/hackthebox/vvm/</link>
      <pubDate>Fri, 24 Jan 2025 03:00:11 -0500</pubDate>
      <guid>https://yams.bot/writeups/hackthebox/vvm/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://yams.bot/images/hackthebox/vvm/banner.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;Hard&amp;rdquo; reversing challenge released about half a year ago at time of writing.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;A new startup claims to have developed an unbreakable client-side password validation system. VCs have invested millions, but I&#39;m a bit skeptical of their claim. Can you prove them wrong?&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;initial-investigation&#34;&gt;Initial investigation&lt;/h2&gt;
&lt;p&gt;Before we begin static analysis we will run ltrace against the binary to see whats going on:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ltrace ./vvm
puts(&amp;#34;=======================&amp;#34;=======================
)                          = 24
puts(&amp;#34;vvm v0.0.3&amp;#34;vvm v0.0.3
)                                       = 11
puts(&amp;#34;=======================&amp;#34;=======================
)                          = 24
malloc(224)                                              = 0x61c7243906b0
mmap(0, 27, 7, 34)                                       = 0x71de16538000
mmap(0, 42, 7, 34)                                       = 0x71de164fe000
mmap(0, 25, 7, 34)                                       = 0x71de164fd000
mmap(0, 18, 7, 34)                                       = 0x71de164fc000
mmap(0, 56, 7, 34)                                       = 0x71de164fb000
mmap(0, 179, 7, 34)                                      = 0x71de164fa000
mmap(0, 37, 7, 34)                                       = 0x71de164f9000
mmap(0, 20, 7, 34)                                       = 0x71de164f8000
mmap(0, 59, 7, 34)                                       = 0x71de164f7000
mmap(0, 53, 7, 34)                                       = 0x71de164f6000
mmap(0, 40, 7, 34)                                       = 0x71de164f5000
mmap(0, 32, 7, 34)                                       = 0x71de164f4000
mmap(0, 20, 7, 34)                                       = 0x71de164f3000
mmap(0, 37, 7, 34)                                       = 0x71de164f2000
mmap(0, 50, 7, 34)                                       = 0x71de164f1000
mmap(0, 33, 7, 34)                                       = 0x71de164f0000
mmap(0, 37, 7, 34)                                       = 0x71de164ef000
mmap(0, 36, 7, 34)                                       = 0x71de164ee000
mmap(0, 21, 7, 34)                                       = 0x71de164ed000
mmap(0, 37, 7, 34)                                       = 0x71de164ec000
mmap(0, 36, 7, 34)                                       = 0x71de164eb000
mmap(0, 25, 7, 34)                                       = 0x71de164ea000
mmap(0, 27, 7, 34)                                       = 0x71de164e9000
mmap(0, 32, 7, 34)                                       = 0x71de164e8000
ptrace(0, 0, 0, 0)                                       = -1
exit(1 &amp;lt;no return ...&amp;gt;
+++ exited (status 1) +++
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The program allocates and maps a few memory regions, calls &lt;code&gt;ptrace()&lt;/code&gt; and then exits. Based on experience we can confidently say that the &lt;code&gt;ptrace()&lt;/code&gt; call is a simple anti-debugging measure. If the ptrace call returns a failure, the program is being debugged in some way and will exit. Based on this information we can start static analysis of the binary in Ghidra.&lt;/p&gt;</description>
    </item>
    <item>
      <title>[HTB] SEPC</title>
      <link>https://yams.bot/writeups/hackthebox/sepc/</link>
      <pubDate>Wed, 22 Jan 2025 00:16:47 -0500</pubDate>
      <guid>https://yams.bot/writeups/hackthebox/sepc/</guid>
      <description>&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;
&lt;p&gt;SEPC is a &amp;ldquo;medium&amp;rdquo; linux kernel based reversing challege. SEPC stands for &amp;ldquo;Secure Enclave Password Checker&amp;rdquo;, with the challenge being featured in the 2023 HTB Business CTF.&lt;/p&gt;
&lt;p&gt;Players are given three files:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;bzImage             (kernel image)
initramfs.cpio.gz   (file system)
run.sh              (a helper script to run the program)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;flag&#34;&gt;Flag&lt;/h2&gt;
&lt;p&gt;Initially I was under the impression that I was going to need to debug the kernel of the virtual machine to better understand what was happening under the hood. But simply reversing and dumping some data from the kernel module was all that was needed!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Exploitation</title>
      <link>https://yams.bot/random/exploitation/</link>
      <pubDate>Fri, 22 Nov 2024 02:01:24 -0500</pubDate>
      <guid>https://yams.bot/random/exploitation/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;finding-offsets&#34;&gt;Finding offsets&lt;/h2&gt;
&lt;p&gt;this may be silly, but sometimes its easy to forget things like this!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;symbol tables: objdump -T /usr/lib/x86_64-linux-gnu/libc.so.6 | grep vtable
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; syms: readelf -s /usr/lib/x86_64-linux-gnu/libc.so.6 | grep puts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;string offset: strings -at x /usr/lib/libc.so.6 | grep /bin/sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;objdump has many options that are extremely useful when debugging :)&lt;/p&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h2 id=&#34;writing-shellcode&#34;&gt;Writing shellcode&lt;/h2&gt;
&lt;p&gt;first write your shellcode in intel (no at&amp;amp;t garbage plz)&lt;/p&gt;
&lt;p&gt;the asm below is a simple call to exit() in 64 bit linux&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Flare] checksum</title>
      <link>https://yams.bot/writeups/flareon2024/checksum/</link>
      <pubDate>Wed, 13 Nov 2024 10:23:10 -0500</pubDate>
      <guid>https://yams.bot/writeups/flareon2024/checksum/</guid>
      <description>&lt;hr&gt;
&lt;p&gt;just dropping my solve script. for context we are given a golang compiled binary that we have to reverse to find the correct checksum :)&lt;/p&gt;
&lt;p&gt;running the solve script satisfies all the constraints then drops the flag image in &lt;a href=&#34;https://pkg.go.dev/os#UserCacheDir&#34;&gt;&lt;code&gt;os.UserCacheDir&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;the programs asks users to solve some simple equations then asks for the calculated checksum. for better golang symbol resolution and decompilation we use the following Ghidra extension: &lt;a href=&#34;https://github.com/mooncat-greenpy/Ghidra_GolangAnalyzerExtension/releases&#34;&gt;https://github.com/mooncat-greenpy/Ghidra_GolangAnalyzerExtension/releases&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;here are relevant screenshots, read the code&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Flare] sshd (extended writeup)</title>
      <link>https://yams.bot/writeups/flareon2024/sshd/</link>
      <pubDate>Wed, 13 Nov 2024 00:00:48 -0500</pubDate>
      <guid>https://yams.bot/writeups/flareon2024/sshd/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;
&lt;p&gt;sshd was the 5th challenge in this years flare-on competition, Flare-On 11&lt;/p&gt;
&lt;p&gt;i am writing this after the competition, and the challenge descriptions are no longer available, but tthe official description was along the lines of:&lt;/p&gt;
&lt;p&gt;&amp;ldquo;some hackers broke into our server and stole some data&amp;hellip; they crashed our server&amp;hellip; blah blah blah find the data&amp;rdquo;&lt;/p&gt;
&lt;p&gt;competitors are given the &amp;ldquo;full&amp;rdquo; file system dump of the server that was compromised&lt;/p&gt;</description>
    </item>
    <item>
      <title>NADCOMMMuseum</title>
      <link>https://yams.bot/writeups/uscyber2024/nadcommmuseum/</link>
      <pubDate>Tue, 12 Nov 2024 22:22:47 -0500</pubDate>
      <guid>https://yams.bot/writeups/uscyber2024/nadcommmuseum/</guid>
      <description>&lt;h2 id=&#34;details&#34;&gt;Details&lt;/h2&gt;
&lt;p&gt;Users are provided with file &lt;code&gt;evidence.flac&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The challenge description reads:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;#34;There&amp;#39;s been a murder, and we need to solve it. We&amp;#39;ve just received a critical communication... from the PAST?!
Help us decode this. We know the killer is from the mid 19th century, but somehow he got a hold of a Bell 202! We need to know what it says to crack this case!&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Armed with this information we gather what we can about Bell 202. Wikipedia lets us know it useds AFSK1200 / AFSK2400&lt;/p&gt;</description>
    </item>
    <item>
      <title>Crystal Clear</title>
      <link>https://yams.bot/writeups/uscyber2024/crystalclear/</link>
      <pubDate>Tue, 12 Nov 2024 22:20:21 -0500</pubDate>
      <guid>https://yams.bot/writeups/uscyber2024/crystalclear/</guid>
      <description>&lt;h1 id=&#34;details&#34;&gt;Details&lt;/h1&gt;
&lt;p&gt;Crystal Clear was a reversing CTF where we had to reverse a program compiled in Crystal, a completely unknown language to me.&lt;/p&gt;
&lt;p&gt;Anyways we find two separate arrays of bytes in memory that are xor&amp;rsquo;d against our input, byte by byte
the result of the xor is stored in some cpu register and if != 0 at the end of the check the &amp;ldquo;password&amp;rdquo; was no good&lt;/p&gt;
&lt;p&gt;So, we throw those byte arrays into z3 and solve away:&lt;/p&gt;</description>
    </item>
    <item>
      <title>[DEFCON CHV] TUF CTF</title>
      <link>https://yams.bot/writeups/defcon32/tufctf/</link>
      <pubDate>Tue, 12 Nov 2024 20:50:10 -0500</pubDate>
      <guid>https://yams.bot/writeups/defcon32/tufctf/</guid>
      <description>&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;
&lt;p&gt;The TUF CTF was featured in the DEFCON 32 car hacking village CTF. There were 2 challenges in this category that involved a TUF server misconfiguration. The 2 challenges tied together, having to solve challenge 1 which leads into challenge 2.&lt;/p&gt;
&lt;h2 id=&#34;local-setup--general-overview&#34;&gt;Local setup &amp;amp; General overview&lt;/h2&gt;
&lt;p&gt;Host &amp;ldquo;TUF&amp;rdquo; web server locally, in this case on port 8003. The TUF web server will contain metadata, which is a symbolic link to the current directory, which contains the forged&lt;/p&gt;</description>
    </item>
    <item>
      <title>About me</title>
      <link>https://yams.bot/about/</link>
      <pubDate>Tue, 12 Nov 2024 19:48:38 -0500</pubDate>
      <guid>https://yams.bot/about/</guid>
      <description>&lt;hr&gt;
&lt;p&gt;A little bit about me, I expect that this list will grow more over time&lt;/p&gt;
&lt;h2 id=&#34;certifications&#34;&gt;Certifications&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Name&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;Issued&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;Expires&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;CompTIA Security+&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;July 2022&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;July 2025&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;Offensive Security Certified Professional (OSCP)&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;April 2024&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Never&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;notable-ctf-achievements&#34;&gt;Notable CTF Achievements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1st place - &lt;a href=&#34;https://www.uscybergames.com/season-4-draft-experience#ctf&#34;&gt;US Cybergames Flag Fest&lt;/a&gt; (Fall 2024 - Solo competition)&lt;/li&gt;
&lt;li&gt;2nd place - DEFCON 32 Car Hacking Village (&lt;a href=&#34;https://www.carhackingvillage.com/&#34;&gt;CHV&lt;/a&gt;) CTF (team: CANucks)&lt;/li&gt;
&lt;li&gt;2nd place - DEFCON 31 Car Hacking Village (&lt;a href=&#34;https://www.carhackingvillage.com/&#34;&gt;CHV&lt;/a&gt;) CTF (team: CANucks)&lt;/li&gt;
&lt;li&gt;Competed in Collegiate Cyber Defense Competition (CCDC) - Blue Team&lt;/li&gt;
&lt;li&gt;Green Belt @ &lt;a href=&#34;https://pwn.college/belts&#34;&gt;pwn.college&lt;/a&gt; (ASU Educational Platform)&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>PinkPonyHash</title>
      <link>https://yams.bot/writeups/uscyber2024/pinkponyhash/</link>
      <pubDate>Tue, 12 Nov 2024 19:23:12 -0500</pubDate>
      <guid>https://yams.bot/writeups/uscyber2024/pinkponyhash/</guid>
      <description>&lt;h2 id=&#34;description&#34;&gt;description&lt;/h2&gt;
&lt;p&gt;pinkponyhash is a simple php web application that tests your cookie to see if you are in the pink_pony club or not. the overall goal of the ctf is the forge your own hash that passes the check. we are able to accomplish this with a SHA-1 length extension attack. there is a repo i found: &lt;a href=&#34;https://github.com/stephenbradshaw/hlextend&#34;&gt;hlextend&lt;/a&gt; which makes this attack trivial&lt;/p&gt;
&lt;h2 id=&#34;source-code&#34;&gt;source code&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;DOCTYPE&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;html&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $secret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;testing_testing_123&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;assert&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;strlen&lt;/span&gt;($secret) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//make a new cookie for the user
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;make_cookie&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; $secret;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kitty_cat&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;setcookie&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;base64_encode&lt;/span&gt;($payload) &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sha1&lt;/span&gt;($secret &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $payload));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Location: /&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;//reload page
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;exit&lt;/span&gt;(); &lt;span style=&#34;color:#75715e&#34;&gt;//we&amp;#39;re done
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//if no cookie token, set it
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isset&lt;/span&gt;($_COOKIE[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt;])) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no cookie, setting!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;make_cookie&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//if there is a cookie, parse it
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;parsing cookie&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $parsed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;explode&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;, $_COOKIE[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//check sanity
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;($parsed) &lt;span style=&#34;color:#f92672&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;make_cookie&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//verify the hash is sane
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//also make sure the payload is base64 encoded
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    $payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;base64_decode&lt;/span&gt;($parsed[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $hash &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $parsed[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;($payload &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;make_cookie&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sha1&lt;/span&gt;($secret &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $payload) &lt;span style=&#34;color:#f92672&#34;&gt;!==&lt;/span&gt; $hash) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;make_cookie&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//check if we&amp;#39;re in the pink pony club
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;strstr&lt;/span&gt;($payload, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pink_pony&amp;#34;&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FFCTF{Th!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\$&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;_iS_4_Fl@g}&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;h1&amp;gt;OMG A MEMBER OF THE PINK PONY CLUB?! HERES UR FLAG: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$flag&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/h1&amp;gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;h1&amp;gt;sry we only give flags to members of the pink pony club, not &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$payload&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; :c&amp;lt;/h1&amp;gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;writeup&#34;&gt;writeup&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;solve.py&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>[USC 2024] PandaJail</title>
      <link>https://yams.bot/writeups/uscyber2024/pandajail/</link>
      <pubDate>Tue, 12 Nov 2024 19:04:41 -0500</pubDate>
      <guid>https://yams.bot/writeups/uscyber2024/pandajail/</guid>
      <description>&lt;h2 id=&#34;description&#34;&gt;description&lt;/h2&gt;
&lt;p&gt;the actual description reads: &amp;ldquo;im stuck in a Pickle, can you help me out of jail?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;this challenge was pretty fun and took me a while to solve due to the challenge being completely blackbox. the challenge gave users a python shell and the ability to execute one command. there is a strict whitelist that only allowed for the sys and pandas module to be executed, anything else would be denied. there was also a blacklist on the amount of special characters that could be used.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Scrabble</title>
      <link>https://yams.bot/writeups/uscyber2024/scrabble/</link>
      <pubDate>Tue, 12 Nov 2024 18:57:04 -0500</pubDate>
      <guid>https://yams.bot/writeups/uscyber2024/scrabble/</guid>
      <description>&lt;p&gt;this is being written a few months after the CTF so bare with me&lt;/p&gt;
&lt;h2 id=&#34;description&#34;&gt;description&lt;/h2&gt;
&lt;p&gt;we are given a file named enc.raw and a program called scrammbler that is a custom form of &amp;ldquo;encryption&amp;rdquo; (?) the goal of the ctf is to unscrammble the bytes in enc.raw. i dont have the source program anymore, but attached is the reverse of the algorithm used to generate the enc.raw file.&lt;/p&gt;
&lt;h2 id=&#34;writeup&#34;&gt;writeup&lt;/h2&gt;
&lt;p&gt;srand() is seeded with the size of the file&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flag Terminal</title>
      <link>https://yams.bot/writeups/uscyber2024/flagterminal/</link>
      <pubDate>Tue, 12 Nov 2024 18:31:11 -0500</pubDate>
      <guid>https://yams.bot/writeups/uscyber2024/flagterminal/</guid>
      <description>&lt;p&gt;this writeup is created months after the ctf, so bare with me&lt;/p&gt;
&lt;h2 id=&#34;description&#34;&gt;description&lt;/h2&gt;
&lt;p&gt;this writeup is very similar to my cache money writeup, except for starters it is not very pretty to look at. this was done during the CTF and i havent cleaned it up, and i dont plan on cleaning it up. anyways the main differences from this challenge and cache money is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;we can only allocate 4 chunks, this time up to 64 bytes in size
&lt;ul&gt;
&lt;li&gt;we can overflow into the next chunk by creating a chunk of size X and writing &amp;gt;X into the chunk&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;this uses glibc 2.27&lt;/li&gt;
&lt;li&gt;we use a one_gadget in glibc 2.27 to pop the shell instead of calling system with sh&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;writeup&#34;&gt;writeup&lt;/h2&gt;
&lt;p&gt;when running the program we are greeted with an interesting string:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cache Money</title>
      <link>https://yams.bot/writeups/uscyber2024/cachemoney/</link>
      <pubDate>Tue, 12 Nov 2024 17:03:11 -0500</pubDate>
      <guid>https://yams.bot/writeups/uscyber2024/cachemoney/</guid>
      <description>&lt;p&gt;i am writing this a few months after the CTF ended, so bare with me&lt;/p&gt;
&lt;h3 id=&#34;description&#34;&gt;description&lt;/h3&gt;
&lt;p&gt;dynamic allocated misuse vulnerability using glibc version 2.31
full exploitation is achieved using tcache poisioning, overwriting &lt;code&gt;__free_hook&lt;/code&gt; with a pointer to &lt;code&gt;system&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;writeup&#34;&gt;writeup&lt;/h3&gt;
&lt;p&gt;without dropping the entire source code of the challenge, users have the option to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;allocate a chunk (0-10) of size 0x10&lt;/li&gt;
&lt;li&gt;free a chunk&lt;/li&gt;
&lt;li&gt;edit the contents of a chunk&lt;/li&gt;
&lt;li&gt;view a chunk&lt;/li&gt;
&lt;li&gt;exit the program&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;here we see free_chunk():&lt;/p&gt;</description>
    </item>
    <item>
      <title>research</title>
      <link>https://yams.bot/research/</link>
      <pubDate>Tue, 12 Nov 2024 16:45:17 -0500</pubDate>
      <guid>https://yams.bot/research/</guid>
      <description>&lt;hr&gt;
&lt;h4 id=&#34;coming-soon&#34;&gt;coming soon..&lt;/h4&gt;</description>
    </item>
  </channel>
</rss>
